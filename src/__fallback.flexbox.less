




///////////////////////////////////////////////////////////////////////////////
// CHANGED: DEPRECATED. use **Autoprefixer** instead.
///////////////////////////////////////////////////////////////////////////////

/*################################*\
    xmeter  |  __fallback.flexbox.less
\*################################*/


// Read <https://css-tricks.com/snippets/css/a-guide-to-flexbox/>
// and <https://css-tricks.com/using-flexbox/> for details.

///////////////////////////////////////////////////////////////////////////////


// Table of Contents
// - CONTAINERS
// - ITEMS


//++++++++++++++++++++++++++++++++//
//    # CONTAINERS
//++++++++++++++++++++++++++++++++//
// Sets up a flexbox container.
//
// ^author
// : Chris Harvey
// ^updated
// : 2017-06-02
.flexbox() {
  display: -webkit-box;
  display:     -ms-box;

  display: -webkit-flexbox;
  display:     -ms-flexbox;

  display:     -ms-flex;
  display:         flex;
}

// Determines the direction of the flow.
//
// @direction - The direction of flow.
//            - `row` (default)  - left to right in `ltr`; right to left in `rtl`
//            - `column`         - same as `row` but top to bottom
//            - `row-reverse`    - right to left in `ltr`; left to right in `rtl`
//            - `column-reverse` - same as `row-reverse` but bottom to top
// ^author
// : Chris Harvey
// ^updated
// : 2017-06-02
.flex-direction(@direction: row) {
      -webkit-box-orient: @direction;
   -webkit-box-direction: @direction;
      -ms-flex-direction: @direction;
          flex-direction: @direction;
}

// Determines whether boxes wrap to the next row or column.
//
// @wrap - how blocks will wrap
//       - `nowrap` (default) - single-line / left to right in `ltr`; right to left in `rtl`
//       - `wrap`             - multi-line  / left to right in `ltr`; right to left in `rtl`
//       - `wrap-reverse`     - multi-line  / right to left in `ltr`; left to right in `rtl`
// ^author
// : Chris Harvey
// ^updated
// : 2017-06-02
.flex-wrap(@wrap: nowrap) {
      -ms-flex-wrap: @wrap;
          flex-wrap: @wrap;
}
//++++ end # CONTAINERS ++++//


//++++++++++++++++++++++++++++++++//
//    # ITEMS
//++++++++++++++++++++++++++++++++//
// Determines the order in which items appear in the flex container.
//
// @integer - ‹integer:0› the order in which the item appears in the flex container
//            negative integers may be used.
// ^author
// : Chris Harvey
// ^updated
// : 2017-06-02
.flex-order(@integer: 0) {
  -webkit-box-ordinal-group: @integer;
             -ms-flex-order: @integer;
                      order: @integer;
}

// Shorthand for `flex-grow`, `flex-shrink`, and `flex-basis` properties (in that order).
// Options for the argument:
// 0. `initial` - (default) computes to `0 1 auto` [1]
// 1. `none`    - computes to `0 0 auto`           [2]
// 2. `‹flex-grow›`                                [3]
// 3. `‹flex-grow› ‹flex-shrink›`                  [3]
// 4. `‹flex-basis›`                               [3]
// 5. `‹flex-grow› ‹flex-basis›`                   [3]
// 6. `‹flex-grow› ‹flex-shrink› ‹flex-basis›`
// Notes:
// [1] `initial` - the flex item retains its content width but will shrink
//     if there is not enough space in the flex container.
//     It will not grow if there is extra space.
// [2] `none` - the flex item is set to its content width, and
//     will neither grow nor shrink, regardless of
//     whether there is extra or not enough space in the container.
// [3] When a value is left out, it defaults to the following:
//     - `‹flex-grow›`   : `1`
//     - `‹flex-shrink›` : `1`
//     - `‹flex-basis›`  : `0%`
//     For example:
//     - `flex: auto;` == `flex: 1 1 auto;`
//       the flex item is set to its content width, but
//       will either grow or shrink, based on
//       whether there is extra or not enough space in the container.
//     - `flex: 0;` (unitless zero) == `flex: 0 1 0%;`
//       The flex item starts at 0% or as close to it as possible.
//       It will not grow into extra space, if any.
//       If all items have `flex:0;`, they will be sized as small as possible.
//     - `flex: 1;` == `flex: 1 1 0%;`
//       The flex item starts at 0% but grows or shrinks as necessary
//       with the other items to fill or reduce the extra space.
//       If all items have `flex: 1` then they will be equal.
//       (If there are 4 items then they will all be 25%.)
//     - `flex: 0%;` (zero with unit) == `flex: 1 1 0%;`
//       Equivalent to `flex: 1;`.
//       Same as specifying `flex: 0px;`, `flex: 0rem;`, `flex: 0em;`, or any length 0 with unit.
//     - `flex: 50%;` == `flex: 1 1 50%;`
//       The flex item starts at 50% but grows or shrinks as necessary.
//
// @arg - a space-separated list of:
//        none | [ ‹number› ‹number›? || ‹length› ]
//        (see options above)
// ^author
// : Chris Harvey
// ^updated
// : 2017-06-02
.flex(@arg: 0 1 auto) {
  -webkit-box-flex: @arg;
          -ms-flex: @arg;
              flex: @arg;
}

// Specifies what amount of space inside the flex container this item should take up.
//
// ^param
// @number (0) - the flex grow factor, relative to other items’ values.
//               negative values are not allowed.
// ^author
// : Chris Harvey
// ^updated
// : 2016-04-26
.flex-grow(@number: 0) {
  -webkit-flex-grow: @number;
      -ms-flex-grow: @number;
          flex-grow: @number;
}

// The opposite of flex-grow.
// Specifies what amount of space inside the flex container this item should take up.
//
// ^param
// @number (1) - the flex shrink factor, relative to other items’ values.
//               negative values are not allowed.
// ^author
// : Chris Harvey
// ^updated
// : 2016-04-26
.flex-shrink(@number: 1) {
  -webkit-flex-shrink: @number;
      -ms-flex-shrink: @number;
          flex-shrink: @number;
}

// Specifies the initial main size of a flex item.
// Affects the width of this item’s content-box unless otherwise specified by `box-sizing`.
//
// ^param
// @width - the width of this item (or height if `flex-direction==column`)
//        - `auto` (default) - gets the width (or height if `flex-direction==column`) of this item
//        - `content`        - indicates automatic sizing (like `auto` for `width` property)
// ^author
// : Chris Harvey
// ^updated
// : 2016-04-26
.flex-basis(@width: auto) {
  -webkit-flex-basis: @width;
      -ms-flex-basis: @width;
          flex-basis: @width;
}
//++++ end # ITEMS ++++//
