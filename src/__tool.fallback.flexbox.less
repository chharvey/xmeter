
/*################################*\
    __tool.fallback.flexbox.less
\*################################*/


// Read <https://css-tricks.com/snippets/css/a-guide-to-flexbox/>
// and <https://css-tricks.com/using-flexbox/> for details.

///////////////////////////////////////////////////////////////////////////////


#XMETER {
  // Table of Contents
  // - CONTAINERS
  // - ITEMS


  /*++++++++++++++++++++++++++++++++*\
      #CONTAINERS
  \*++++++++++++++++++++++++++++++++*/
  // Sets up a flexbox container.
  //
  // ^author
  // : Chris Harvey
  // ^updated
  // : 2015-09-03
  .flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
  }

  // Determines the direction of the flow.
  //
  // @direction - The direction of flow.
  //            - `row` (default)  - left to right in `ltr`; right to left in `rtl`
  //            - `column`         - same as `row` but top to bottom
  //            - `row-reverse`    - right to left in `ltr`; left to right in `rtl`
  //            - `column-reverse` - same as `row-reverse` but bottom to top
  // ^author
  // : Chris Harvey
  // ^updated
  // : 2015-02-12
  .flex-direction(@direction) {
    -webkit-flex-direction: @direction;
       -moz-flex-direction: @direction;
        -ms-flex-direction: @direction;
            flex-direction: @direction;
  }

  // Determines whether boxes wrap to the next row or column.
  //
  // @wrap - how blocks will wrap
  //       - `nowrap` (default) - single-line / left to right in `ltr`; right to left in `rtl`
  //       - `wrap`             - multi-line  / left to right in `ltr`; right to left in `rtl`
  //       - `wrap-reverse`     - multi-line  / right to left in `ltr`; left to right in `rtl`
  // ^author
  // : Chris Harvey
  // ^updated
  // : 2015-02-12
  .flex-wrap(@wrap) {
    -webkit-flex-wrap: @wrap;
       -moz-flex-wrap: @wrap; // no support for Firefox 27 and older (28+ uses `flex-wrap`)
        -ms-flex-wrap: @wrap;
            flex-wrap: @wrap;
  }

  // Determines how content is justified along the main axis.
  //
  // @justify - how content is justified
  //          - `flex-start` (default) - items are aligned left (in rows) or top (in columns)
  //          - `flex-end`             - items are aligned right (in rows) or bottom (in columns)
  //          - `center`               - items are pushed to middle
  //          - `space-between`        - extra space is distributed between items,
  //                                     leaving them flush left/right
  //          - `space-around`         - extra space is distributed around items,
  //                                     leaving margin on left/right.
  //                                     Good for centering one item without using
  //                                     `margin-left: auto; margin-right: auto;`!!!
  // ^author
  // : Chris Harvey
  // ^updated
  // : 2015-10-12
  .flex-justify-content(@justify) {
    -webkit-justify-content: @justify;
       -moz-justify-content: @justify;
        -ms-justify-content: @justify;
            justify-content: @justify;
  }

  // Aligns a flex container's lines when there is empty space in the cross-axis.
  // (align vertically for `flex-direction: row` or horizontally for `flex-direction: column`)
  //
  // @align - how content is aligned
  //        - `stretch` (default) - lines stretch to take up the remaining space
  //        - `flex-start`        - lines packed to the start of the container
  //        - `flex-end`          - lines packed to the end of the container
  //        - `center`            - lines packed to the center of the container
  //        - `space-between`     - extra space is distributed between lines,
  //                                leaving them flush top/bottom
  //        - `space-around`      - extra space is distributed around lines,
  //                                leaving margin on top/bottom.
  // ^author
  // : Chris Harvey
  // ^updated
  // : 2015-09-03
  .flex-align-content(@align) {
    -webkit-align-content: @align;
       -moz-align-content: @align;
        -ms-align-content: @align;
            align-content: @align;
  }

  // Defines default behavior for aligining flex items along cross axis
  // (align vertically for `flex-direction: row` or horizontally for `flex-direction: column`)
  //
  // @align - how items are aligned
  //        - `stretch` (default) - stretch to fill the container
  //                                (still respect min-width/max-width)
  //        - `flex-start`        - cross-start margin edge of the items is placed on the cross-start line
  //        - `flex-end`          - cross-end margin edge of the items is placed on the cross-end line
  //        - `center`            - items are centered in the cross-axis
  //        - `baseline`          - items are aligned such as their baselines align
  // ^author
  // : Chris Harvey
  // ^updated
  // : 2015-09-03
  .flex-align-items(@align) {
    -webkit-align-items: @align;
       -moz-align-items: @align;
        -ms-align-items: @align;
            align-items: @align;
  }
  //++++ #end CONTAINERS ++++//


  /*++++++++++++++++++++++++++++++++*\
      #ITEMS
  \*++++++++++++++++++++++++++++++++*/
  // Shorthand for `flex-grow`, `flex-shrink`, and `flex-basis` properties (in that order).
  //
  // @values - none | [ ‹number:0› ‹number:1›? || ‹length:auto› ]
  // ^author
  // : Chris Harvey
  // ^updated
  // : 2015-09-03
  .flex(@values) {
    -webkit-box-flex: @values;
       -moz-box-flex: @values;
        -webkit-flex: @values;
           -moz-flex: @values;
            -ms-flex: @values;
                flex: @values;
  }

  // Determines the order in which items appear in the flex container.
  //
  // @integer - ‹integer:0› the order in which the item appears in the flex container
  // ^author
  // : Chris Harvey
  // ^updated
  // : 2015-09-03
  .flex-order(@integer) {
    -webkit-box-ordinal-group: @integer;
       -moz-box-ordinal-group: @integer;
               -ms-flex-order: @integer;
                -webkit-order: @integer;
                        order: @integer;
  }

  // Overrides behavior of `align-items` for aligining one specific flex item along cross axis
  // (align vertically for `flex-direction: row` or horizontally for `flex-direction: column`)
  //
  // @align - how the item is aligned
  //        - `auto` (default) - value of parent’s `align-items` property
  //        - `stretch`        - stretch to fill the container
  //                             (still respect min-width/max-width)
  //        - `flex-start`     - cross-start margin edge of the items is placed on the cross-start line
  //        - `flex-end`       - cross-end margin edge of the items is placed on the cross-end line
  //        - `center`         - items are centered in the cross-axis
  //        - `baseline`       - items are aligned such as their baselines align
  // ^author
  // : Chris Harvey
  // ^updated
  // : 2015-10-14
  .flex-align-self(@align) {
    -webkit-align-self: @align;
       -moz-align-self: @align;
        -ms-align-self: @align;
            align-self: @align;
  }
  //++++ #end ITEMS ++++//
}
